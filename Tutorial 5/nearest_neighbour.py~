import functools
import itertools
import pathlib
import random
import time
import math
import re
import matplotlib.pyplot as plt
from collections import Counter, defaultdict, namedtuple
from statistics import mean, median, stdev
from typing import Set, List, Tuple, Iterable, Dict

City = complex  # e.g. City(300, 100)
Cities = frozenset  # A set of cities
Tour = list  # A list of cities visited, in order
TSP = callable  # A TSP algorithm is a callable function
Link = Tuple[City, City]  # A city-city link


def distance(A: City, B: City) -> float:
    "Distance between two cities"
    return abs(A - B)


def shortest(tours: Iterable[Tour]) -> Tour:
    "The tour with the smallest tour length."
    return min(tours, key=tour_length)


def tour_length(tour: Tour) -> float:
    "The total distances of each link in the tour, including the link from last back to first."
    return sum(distance(tour[i], tour[i - 1]) for i in range(len(tour)))


def valid_tour(tour: Tour, cities: Cities) -> bool:
    "Does `tour` visit every city in `cities` exactly once?"
    return Counter(tour) == Counter(cities)


def run(tsp: callable, cities: Cities):
    """Run a TSP algorithm on a set of cities and plot/print results."""
    t0 = time.perf_counter()
    tour = tsp(cities)
    t1 = time.perf_counter()
    L = tour_length(tour)
    print(f"length {round(L):,d} tour of {len(cities)} cities in {t1 - t0:.3f} secs")
    plot_tour(tour)
